/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const ServiceAccountCredentialsWithUri = require('../internal/auth/service-account-credentials-with-uri'),
	fs = require('fs'),
	path = require('path');


class ServiceAccountCredentialsBuilder {
	/**
	 * @hideconstructor
	 */
	constructor() {

	}

	/**
	 * Set Client ID (API Key)
	 * @param {!String} clientId - Client Id (API Key)
	 * @returns {ServiceAccountCredentialsBuilder} This Builder instance to add any additional parameters.
	 */
	withClientId(clientId) {
		this.clientId = clientId;
		return this;
	}

	/**
	 * Set Client Secret
	 * @param {!String} clientSecret - Client Secret
	 * @returns {ServiceAccountCredentialsBuilder} This Builder instance to add any additional parameters.
	 */
	withClientSecret(clientSecret) {
		this.clientSecret = clientSecret;
		return this;
	}

	/**
	 * Set private key
	 * @param {!String} privateKey - Content of the Private Key (PEM format)
	 * @returns {ServiceAccountCredentialsBuilder} This Builder instance to add any additional parameters.
	 */
	withPrivateKey(privateKey) {
		this.privateKey = privateKey;
		return this;
	}

	/**
	 * Set Organization Id (format: org_ident@AdobeOrg) that has been configured for access to PDF Services API
	 * @param {!String} organizationId - Organization ID (format: org_ident@AdobeOrg)
	 * @returns {ServiceAccountCredentialsBuilder} This Builder instance to add any additional parameters.
	 */
	withOrganizationId(organizationId) {
		this.organizationId = organizationId;
		return this;
	}

	/**
	 * Set Account Id (format: id@techacct.adobe.com)
	 * @param {!String} accountId - Account ID (format: id@techacct.adobe.com)
	 * @returns {ServiceAccountCredentialsBuilder} This Builder instance to add any additional parameters.
	 */
	withAccountId(accountId) {
		this.accountId = accountId;
		return this;
	}

	/**
	 * Sets Service Account Credentials using the JSON credentials file path. All the keys in the JSON
	 * structure are optional.
	 * <p>
	 * JSON structure:
	 * <pre>
	 * {
	 *   "client_credentials": {
	 *     "client_id": "CLIENT_ID",
	 *     "client_secret": "CLIENT_SECRET"
	 *   },
	 *   "service_account_credentials": {
	 *     "organization_id": "org_ident@AdobeOrg",
	 *     "account_id": "id@techacct.adobe.com",
	 *     "private_key_file": "private.key"
	 *   }
	 * }
	 * </pre>
	 * private_key_file is the path of private key file. It will be looked up in the classpath and the
	 * directory of JSON credentials file.
	 * @param {!String} credentialsFilePath - JSON credentials file path
	 * @returns {ServiceAccountCredentialsBuilder} This Builder instance to add any additional parameters.
	 */
	fromFile(credentialsFilePath) {
		const credentialsConfig = JSON.parse(fs.readFileSync(credentialsFilePath));

		const clientCredentials = credentialsConfig.client_credentials;
		const serviceAccountCredentials = credentialsConfig.service_account_credentials;
		const cpfServices = credentialsConfig.cpfServices;

		if (clientCredentials) {
			this.clientId = (clientCredentials.client_id) ? clientCredentials.client_id : this.clientId;
			this.clientSecret = (clientCredentials.client_secret) ? clientCredentials.client_secret : this.clientSecret;
		}
		if (serviceAccountCredentials) {
			this.organizationId = (serviceAccountCredentials.organization_id) ? serviceAccountCredentials.organization_id : this.organizationId;
			this.accountId = (serviceAccountCredentials.account_id) ? serviceAccountCredentials.account_id : this.accountId;
			this.imsBaseUri = (serviceAccountCredentials.ims_base_uri) ? serviceAccountCredentials.ims_base_uri : this.imsBaseUri;
			this.claim = (serviceAccountCredentials.claim) ? serviceAccountCredentials.claim : this.claim;
			const privateKeyFilePath = serviceAccountCredentials.private_key_file;
			if (privateKeyFilePath != null) {
				if (fs.existsSync(privateKeyFilePath)) {
					this.privateKey = fs.readFileSync(privateKeyFilePath).toString();
				} else {
					this.privateKey = fs.readFileSync(path.dirname(credentialsFilePath) + path.sep + privateKeyFilePath).toString();
				}
			}
		}
		if (cpfServices) {
			this.opsCreateUri = (cpfServices.cpfOpsCreateUri) ? cpfServices.cpfOpsCreateUri : this.opsCreateUri;
		}
		return this;

	}

	/**
	 * Returns a new {@link ServiceAccountCredentials} instance built from the current state of this builder.
	 * @returns {ServiceAccountCredentials} A ServiceAccountCredentials instance.
	 */
	build() {
		let serviceAccountCredentialsWithUri = new ServiceAccountCredentialsWithUri(this.imsBaseUri, this.clientId,
			this.clientSecret, this.privateKey,
			this.claim, this.organizationId,
			this.accountId, this.opsCreateUri);
		Object.freeze(serviceAccountCredentialsWithUri);
		return serviceAccountCredentialsWithUri;
	}
}

module.exports = ServiceAccountCredentialsBuilder;
