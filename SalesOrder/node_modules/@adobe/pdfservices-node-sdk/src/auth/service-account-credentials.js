/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const
	Schema = require('validate');

/**
 * Service Account credentials allow your application to call PDF Services API on behalf of the application itself,
 * or on behalf of an enterprise organization. For getting the credentials,
 * <a href="https://www.adobe.com/go/dcsdks_credentials?ref=getStartedWithServicesSdk">Click Here</a>
 */
class ServiceAccountCredentials {
	/**
	 * @hideconstructor
	 */
	constructor(client_id, client_secret, private_key, organization_id, account_id){
		this.clientId = client_id;
		this.clientSecret = client_secret;
		this.privateKey = private_key;
		this.organizationId = organization_id;
		this.accountId = account_id;

	}

	/**
	 * Client Id (API Key)
	 */
	getClientId() {
		return this.clientId;
	}

	/**
	 * Client Secret
	 */
	 getClientSecret() {
		return this.clientSecret;
	}

	/**
	 * Content of the Private Key (PEM format)
	 */
	 getPrivateKey() {
		return this.privateKey;
	}

	/**
	 * Identifies the organization(format: org_ident@AdobeOrg) that has been configured for access to PDF Services API.
	 */
	 getOrganizationId() {
		return this.organizationId;
	}

	/**
	 * Account ID(format: id@techacct.adobe.com)
	 */
	 getAccountId() {
		return this.accountId;
	}

	validate(){
		const ServiceAccountValidator = new Schema({
													   'clientId': {
														   required: true,
														   message: 'client_id must not be blank'
													   },
													   'clientSecret': {
														   required: true,
														   message: 'client_secret must not be blank'
													   },
													   'privateKey': {
														   required: true,
														   message: 'private_key must not be blank'
													   },
													   'claim': {
														   required: true,
														   message: 'claim must not be blank'
													   },
													   'organizationId': {
														   required: true,
														   message: 'organisation_id must not be blank'
													   },
													   'accountId': {
														   required: true,
														   message: 'account_id must not be blank'
													   },

												   });

		const config = Object.assign({}, {clientId:this.clientId,clientSecret:this.clientSecret,privateKey:this.privateKey,claim: this.claim,organizationId:this.organizationId,accountId:this.accountId});

		const errors = ServiceAccountValidator.validate(config);
		if (errors.length > 0) {
			const messages = [];
			errors.forEach(err => messages.push(err.message));
			throw new Error(messages.join('; '));
		}
	}

}


module.exports = ServiceAccountCredentials;
