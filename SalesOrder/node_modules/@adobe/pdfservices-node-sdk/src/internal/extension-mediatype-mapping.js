/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const ExtensionMediaTypeMapping = {
	ai: {
		extension: 'ai',
		mediaType: 'application/illustrator'
	},
	bmp: {
		extension: 'bmp',
		mediaType: 'image/bmp'
	},
	doc: {
		extension: 'doc',
		mediaType: 'application/msword'
	},
	docx: {
		extension: 'docx',
		mediaType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
	},
	gif: {
		extension: 'gif',
		mediaType: 'image/gif'
	},
	html: {
		extension: 'html',
		mediaType: 'text/html'
	},
	indd: {
		extension: 'indd',
		mediaType: 'application/x-indesign'
	},
	jpeg: {
		extension: 'jpeg',
		mediaType: 'image/jpeg'
	},
	jpg: {
		extension: 'jpg',
		mediaType: 'image/jpeg'
	},
	json: {
		extension: 'json',
		mediaType: 'application/json'
	},
	pdf: {
		extension: 'pdf',
		mediaType: 'application/pdf'
	},
	png: {
		extension: 'png',
		mediaType: 'image/png'
	},
	ppt: {
		extension: 'ppt',
		mediaType: 'application/vnd.ms-powerpoint'
	},
	pptx: {
		extension: 'pptx',
		mediaType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
	},
	psd: {
		extension: 'psd',
		mediaType: 'image/vnd.adobe.photoshop'
	},
	rtf: {
		extension: 'rtf',
		mediaType: 'text/rtf'
	},
	tif: {
		extension: 'tif',
		mediaType: 'image/tiff'
	},
	tiff: {
		extension: 'tiff',
		mediaType: 'image/tiff'
	},
	txt: {
		extension: 'txt',
		mediaType: 'text/plain'
	},
	xls: {
		extension: 'xls',
		mediaType: 'application/vnd.ms-excel'
	},
	xlsx: {
		extension: 'xlsx',
		mediaType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
	},
	zip: {
		extension: 'zip',
		mediaType: 'application/zip'
	},
	csv: {
		extension: 'csv',
		mediaType: 'text/csv'
	},
	getExtensionFromMediaType: mediaType => {
		let extension;
		if (mediaType) {
			Object.keys(ExtensionMediaTypeMapping).forEach(key => {
				if (ExtensionMediaTypeMapping[key].mediaType === mediaType.toLowerCase()) {
					extension = ExtensionMediaTypeMapping[key].extension;
				}
			});
		}
		return extension;
	},

	getFormatFromMediaType: mediaType => {
		let format;
		if (mediaType) {
			Object.keys(ExtensionMediaTypeMapping).forEach(key => {
				if (ExtensionMediaTypeMapping[key].mediaType === mediaType.toLowerCase()) {
					format = ExtensionMediaTypeMapping[key];
				}
			});
		}
		return format;
	},

	getMediaTypeFromExtension: extension => {
		let mediaType;
		if (extension) {
			Object.keys(ExtensionMediaTypeMapping).forEach(key => {
				if (ExtensionMediaTypeMapping[key].extension === extension.toLowerCase()) {
					mediaType = ExtensionMediaTypeMapping[key].mediaType;
				}
			});
		}
		return mediaType;
	}
};
Object.freeze(ExtensionMediaTypeMapping);

module.exports = ExtensionMediaTypeMapping;
