/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const CpfOperationService = require('./cpf-operation-service'),
	cpfConfig = require('../config/cpf-engine-config.js'),
	PageRange = require('../../internal/io/page-range'),
	CPFMessage = require('./../cpf/cpf-message'),
	CpfDocument = require('../cpf/request/platform/cpf-document.js');

class CombinePDFService extends CpfOperationService {
	constructor() {
		super();
	}

	generateDocumentsInList(sourceFileRefs, includeRanges){
		let documentsInList = [];
		for(let i = 0; i < sourceFileRefs.length; i++){
			let documentsIn = {};
			documentsIn.documentIn = new CpfDocument(sourceFileRefs[i].input.mediaType,'file'+`${i}`);
			documentsIn.pageRanges = {};
			documentsIn.pageRanges['cpf:inline'] = includeRanges[i].length !== 0 ? includeRanges[i] : [new PageRange(1, undefined)];
			documentsInList.push(documentsIn);
		}
		return documentsInList;
	}

	getCPFMessage(operationMessage) {
		let outputDocument = new CpfDocument('application/pdf','file'),
			params = {},
			inputDocuments = this.generateDocumentsInList(operationMessage.sourceFileRefs, operationMessage.includeRanges),
			files = operationMessage.sourceFileRefs;

		return new CPFMessage(inputDocuments, outputDocument, params, files, cpfConfig.combinePdf);
	}

}

module.exports = CombinePDFService;
