/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const CPFOperationService = require('./cpf-operation-service'),
	SDKConstants = require('../constants/sdk-constants'),
	cpfConfig = require('../config/cpf-engine-config.js'),
	CPFMessage = require('./../cpf/cpf-message'),
	CpfDocument = require('../cpf/request/platform/cpf-document');
const ExtensionMediaTypeMapping = require("../extension-mediatype-mapping");

class ExportPDFService extends CPFOperationService {
	constructor() {
		super();
	}

	getOutputDocument(exportTargetFormat, exportOutputType) {
		let outputDocument = new CpfDocument(exportTargetFormat.mediaType,'file');
		if (exportTargetFormat.extension === 'png' || exportTargetFormat.extension === 'jpeg')
			outputDocument = new CpfDocument(this.getOutputType(exportTargetFormat, exportOutputType),'file');
		return outputDocument;
	}

	getCPFMessage(operationMessage) {
		let outputDocument = this.getOutputDocument(operationMessage.targetFormat, operationMessage.outputType),
			params = Object.assign({},{ targetFormat: operationMessage.targetFormat.extension }),
			inputDocuments = new CpfDocument(operationMessage.sourceFileRefs.input.mediaType,'file0'),
			files = [operationMessage.sourceFileRefs];

		if (outputDocument['dc:format'] === 'image/jpeg' || outputDocument['dc:format'] === 'image/png') {
			params = Object.assign(params, {outputType: operationMessage.outputType});
		}

		if (operationMessage.outputType === SDKConstants.ExportPDFToImages.SupportedOutputTypes.listOutput) {
			return new CPFMessage(inputDocuments, [outputDocument], params, files, cpfConfig.exportPdf);
		} else {
			return new CPFMessage(inputDocuments, outputDocument, params, files, cpfConfig.exportPdf);
		}
	}

	getOutputType(exportTargetFormat, exportOutputType){
		if (exportOutputType === SDKConstants.ExportPDFToImages.SupportedOutputTypes.listOutput){
			return exportTargetFormat.mediaType;
		}
		return ExtensionMediaTypeMapping.zip.mediaType;


	}

}

module.exports = ExportPDFService;
