/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const Schema = require('validate');


/**
 * List of supported documentLanguage for {@link CreatePDFOperation}
 * @enum
 * @memberOf CreatePDFFromPPTOptions
 * @readonly
 */

const SupportedDocumentLanguage = {
	/**
	 * Represents "Danish (Denmark)" locale
	 * @type {string}
	 */
	DA_DK: 'da-DK',
	/**
	 * Represents "Lithuanian (Lithuania)" locale
	 * @type {string}
	 */
	LT_LT: 'lt-LT',
	/**
	 * Represents "Slovenian (Slovenia)" locale
	 * @type {string}
	 */
	SL_SI: 'sl-SI',
	/**
	 * Represents "Greek (Greece)" locale
	 * @type {string}
	 */
	EL_GR: 'el-GR',
	/**
	 * Represents "Russian (Russia)" locale
	 * @type {string}
	 */
	RU_RU: 'ru-RU',
	/**
	 * Represents "English (United States)" locale
	 * @type {string}
	 */
	EN_US: 'en-US',
	/**
	 * Represents "Chinese (Hong Kong)" locale
	 * @type {string}
	 */
	ZH_HK: 'zh-HK',
	/**
	 * Represents "Hungarian (Hungary)" locale
	 * @type {string}
	 */
	HU_HU: 'hu-HU',
	/**
	 * Represents "Estonian (Estonia)" locale
	 * @type {string}
	 */
	ET_EE: 'et-EE',
	/**
	 * Represents "Portuguese (Brazil)" locale
	 * @type {string}
	 */
	PT_BR: 'pt-BR',
	/**
	 * Represents "Ukrainian (Ukraine)" locale
	 * @type {string}
	 */
	UK_UA: 'uk-UA',
	/**
	 * Represents "Norwegian (Norway)" locale
	 * @type {string}
	 */
	NB_NO: 'nb-NO',
	/**
	 * Represents "Polish (Poland)" locale
	 * @type {string}
	 */
	PL_PL: 'pl-PL',
	/**
	 * Represents "Latvian (Latvia)" locale
	 * @type {string}
	 */
	LV_LV: 'lv-LV',
	/**
	 * Represents "Finnish (Finland)" locale
	 * @type {string}
	 */
	FI_FI: 'fi-FI',
	/**
	 * Represents "Japanese (Japan)" locale
	 * @type {string}
	 */
	JA_JP: 'ja-JP',
	/**
	 * Represents "Spanish (Spain)" locale
	 * @type {string}
	 */
	ES_ES: 'es-ES',
	/**
	 * Represents "Bulgarian (Bulgaria)" locale
	 * @type {string}
	 */
	BG_BG: 'bg-BG',
	/**
	 * Represents "English (United Kingdom)" locale
	 * @type {string}
	 */
	EN_GB: 'en-GB',
	/**
	 * Represents "Czech (Czech Republic)" locale
	 * @type {string}
	 */
	CS_CZ: 'cs-CZ',
	/**
	 * Represents "Maltese (Malta)" locale
	 * @type {string}
	 */
	MT_MT: 'mt-MT',
	/**
	 * Represents "German (Germany)" locale
	 * @type {string}
	 */
	DE_DE: 'de-DE',
	/**
	 * Represents "Croatian (Croatia)" locale
	 * @type {string}
	 */
	HR_HR: 'hr-HR',
	/**
	 * Represents "Slovak (Slovakia)" locale
	 * @type {string}
	 */
	SK_SK: 'sk-SK',
	/**
	 * Represents "Serbian (Serbia)" locale
	 * @type {string}
	 */
	SR_SR: 'sr-SR',
	/**
	 * Represents "Catalan (Canada)" locale
	 * @type {string}
	 */
	CA_CA: 'ca-CA',
	/**
	 * Represents "Macedonian (Macedonia)" locale
	 * @type {string}
	 */
	MK_MK: 'mk-MK',
	/**
	 * Represents "Korean (Korea)" locale
	 * @type {string}
	 */
	KO_KR: 'ko-KR',
	/**
	 * Represents "German (Switzerland)" locale
	 * @type {string}
	 */
	DE_CH: 'de-CH',
	/**
	 * Represents "Dutch (Netherlands)" locale
	 * @type {string}
	 */
	NL_NL: 'nl-NL',
	/**
	 * Represents "Chinese (China)" locale
	 * @type {string}
	 */
	ZH_CN: 'zh-CN',
	/**
	 * Represents "Swedish (Sweden)" locale
	 * @type {string}
	 */
	SV_SE: 'sv-SE',
	/**
	 * Represents "Italian (Italy)" locale
	 * @type {string}
	 */
	IT_IT: 'it-IT',
	/**
	 * Represents "Norwegian (Norway)" locale
	 * @type {string}
	 */
	NO_NO: 'no-NO',
	/**
	 * Represents "Turkish (Turkey)" locale
	 * @type {string}
	 */
	TR_TR: 'tr-TR',
	/**
	 * Represents "French (France)" locale
	 * @type {string}
	 */
	FR_FR: 'fr-FR',
	/**
	 * Represents "Romanian (Romania)" locale
	 * @type {string}
	 */
	RO_RO: 'ro-RO',
	/**
	 * Represents "Hebrew (Israel)" locale
	 * @type {string}
	 */
	IW_IL: 'iw-IL',
};

Object.freeze(SupportedDocumentLanguage);
/**
 * Parameters for converting PPT Files to PDF using {@link CreatePDFOperation}.
 */
class CreatePDFFromPPTOptions {
	/**
	 * @hideconstructor
	 * @param builder
	 */
	constructor(builder) {
		this.documentLanguage = builder.documentLanguage;
		this.createTaggedPDF = builder.createTaggedPDF;
		Object.preventExtensions(this);
	}

	static get SupportedDocumentLanguage() {
		return SupportedDocumentLanguage;
	}

	/**
	 * Returns a builder for {@link CreatePDFFromPPTOptions}.
	 * @memberOf CreatePDFFromPPTOptions
	 * @function
	 * @returns {CreatePDFFromPPTOptionsBuilder} A Builder instance for initializing {@link CreatePDFFromPPTOptions}.
	 */
	static get Builder() {
		/**
		 *
		 * Builds a {@link CreatePDFFromPPTOptions} instance.
		 */
		class CreatePDFFromPPTOptionsBuilder {
			/**
			 * Constructs a {@link CreatePDFFromPPTOptionsBuilder} instance.
			 */
			constructor() {
			}


			/**
			 * Sets the documentLanguage parameter. Preferred editing language to open the input document.
			 * @param {!CreatePDFFromPPTOptions.SupportedDocumentLanguage} documentLanguage - see {@link CreatePDFFromPPTOptions.SupportedDocumentLanguage}. Default value is
			 * {@link CreatePDFFromPPTOptions.SupportedDocumentLanguage.EN_US}
			 * @returns {CreatePDFFromPPTOptionsBuilder} This Builder instance to add any additional parameters.
			 */

			withDocumentLanguage(documentLanguage) {
				if(!documentLanguage) throw new Error("documentLanguage cannot be null");
				this.documentLanguage = documentLanguage;
				return this;
			}

			withCreateTaggedPdf(createTaggedPDF) {
				if(createTaggedPDF === null || createTaggedPDF === undefined) throw new Error("createTaggedPDF cannot be null");
				this.createTaggedPDF = createTaggedPDF;
				return this;
			}

			/**
			 * Returns a new {@link CreatePDFFromPPTOptions} instance built from the current state of this builder.
			 * @returns {CreatePDFFromPPTOptions} A CreatePDFFromPPTOptions instance.
			 */
			build() {
				let createPDFFromPPTOptions =  new CreatePDFFromPPTOptions(this);
				Object.freeze(createPDFFromPPTOptions);
				return createPDFFromPPTOptions;
			}
		}

		return CreatePDFFromPPTOptionsBuilder;
	}

	validate() {
		const validator = new Schema({
			'documentLanguage': {
				type: String,
				required: false,
				enum: Object.values(SupportedDocumentLanguage),
				message: {
					type: 'documentLanguage must be a String',
					require: 'documentLanguage cannot be null'
				}
			},
			'createTaggedPDF': {
				type: Boolean,
				required: false,
				message: {
					type: 'createTaggedPDF must be a Boolean',
					require: 'createTaggedPDF cannot be null'
				}
			}
		});
		return validator.validate(this);
	}
}

module.exports = CreatePDFFromPPTOptions;
