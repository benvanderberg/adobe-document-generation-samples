/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const PageRange = require('../../internal/io/page-range');

/**
 * Page ranges of a file, inclusive of start and end page index, where page index starts from 1.
 */
class PageRanges {
	/**
	 * Constructs a new PageRanges instance with no pages added.
	 */
	constructor() {
		this._ranges = [];
	}

	/**
	 * Adds a single page. Page index starts from 1.
	 *
	 * @param {!Number} page - single page index
	 */
	addSinglePage(page) {
		this._ranges.push(new PageRange(page, page));
	}

	/**
	 *
	 * Adds a page range. Page indexes start from 1.
	 *
	 * @param {!Number} start - start page index, inclusive
	 * @param {!Number} end - end page index, inclusive
	 */
	addPageRange(start, end) {
		this._ranges.push(new PageRange(start, end));
	}

	/**
	 * Adds a page range from the specified start page index to the last page. Page index starts from 1.
	 *
	 * @param {!Number} start - start page index
	 */
	addAllFrom(start) {
		this._ranges.push(new PageRange(start, Number.MAX_SAFE_INTEGER));
	}

	/**
	 * Adds a page range representing all pages.
	 */
	addAll() {
		this._ranges.push(new PageRange(1, Number.MAX_SAFE_INTEGER));
	}

	toString() {
		const pageRanges = [];
		this._ranges.forEach(pageRange => pageRanges.push(pageRange.toString()));
		return pageRanges.join(',');
	}

	getRanges() {
		const pageRanges = [];
		this._ranges.forEach(pageRange => {
			if(pageRange.end === Number.MAX_SAFE_INTEGER) //assuming that end can never be given as Number.MAX_SAFE_INTEGER explicitly by the end user
				pageRange.end = undefined;
			pageRanges.push(pageRange);
		});
		return pageRanges;
	}

	validate() {
		this._ranges.forEach(pageRange => pageRange.validate());
	}
}

Object.freeze(PageRanges);
module.exports = PageRanges;
