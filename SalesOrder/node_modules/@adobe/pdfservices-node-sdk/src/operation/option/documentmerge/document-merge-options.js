/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const Schema = require('validate');
/**
 * List of Output Formats for {@link DocumentMergeOperation}
 * @enum
 * @memberOf DocumentMergeOptions
 * @readonly
 */
const OutputFormat = {
		/**
		 * Represents "application/vnd.openxmlformats-officedocument.wordprocessingml.document" media type
		 * @type {string}
		 */
		DOCX: 'docx',
		/**
		 * Represents "application/pdf" media type
		 * @type {string}
		 */
		PDF: 'pdf'
	};
Object.freeze(OutputFormat);
/**
 * Parameters for specifying the input JSON data and the desired output format for {@link DocumentMergeOperation}.
 */
class DocumentMergeOptions {
	/**
      * Creates a new {@link DocumentMergeOptions} instance
      * @param {!Object} jsonDataForMerge JSON object specifying the input datasource for the document merge process; Cannot be null or empty.
      * @param {!string} outputFormat Target format of the generated output document; Cannot be null or empty.
	  * @param {Object} fragments Can be a JSON object, JSON array or a {@link Fragments} instance for providing the data to resolve fragments in the input document; Can be null or empty.
      * @return A new DocumentMergeOptions instance
      */

	constructor(jsonDataForMerge, outputFormat, fragments) {
		this.outputFormat = outputFormat;
		this.jsonDataForMerge = jsonDataForMerge;
		if (fragments instanceof Fragments) {
			this.fragments = fragments.fragmentsList;
		} else if (fragments instanceof Array) {
			this.fragments = fragments
		} else if (fragments instanceof Object) {
			this.fragments = [fragments];
		}
		Object.preventExtensions(this);
	}

	static get OutputFormat(){
		return OutputFormat;
	}

	validate() {
		const validator = new Schema({
										 'outputFormat': {
											 type: String,
											 required: true,
											 enum:Object.values(OutputFormat),
											 message: {
												 type: 'Output Format must be a string',
												 require: 'Output Format cannot be null or empty'
											 }
										 },
										 'jsonDataForMerge': {
											 type: Object,
											 required: true,
											 message: {
												 type: 'Input JSON Data must be a JSON Object',
												 require: 'Input JSON Data cannot be null or empty'
											 }
										 },
										 'fragments': {
										 	type: Array,
											 required: false,
										 },

									 });
		return validator.validate(this);
	}

}

module.exports = DocumentMergeOptions;


