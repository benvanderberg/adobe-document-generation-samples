/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const ReplacePagesService = require('../internal/api/replace-pages-service'),
	ExtensionMediaTypeMapping = require('../internal/extension-mediatype-mapping'),
	{ getRandomFileNameWithExtension } = require('../internal/util/path-util'),
	logger = require('./../internal/logger'),
	CombineOperationInput = require('./../internal/io/combine-operation-input'),
	OperationMessage = require('../internal/cpf/operation-message'),
	PageRanges = require('./option/page-ranges'),
	DefaultConfig =  require('../internal/config/dc-services-default-config.js'),
	{
		validateClientContext, validateFileRef, validateAllowedMediaType, validatePageRangesForOperation
	} = require('./../internal/util/validation-util');


/**
 *
 * Supported source file formats for {@link ReplacePagesOperation}.
 * @enum
 * @readonly
 * @memberOf ReplacePagesOperation
 *
 */
const SupportedSourceFormat = {

		/**
		 * Represents "application/pdf" media type
		 * @type {string}
		 */
		pdf: ExtensionMediaTypeMapping.pdf.mediaType
	},

	allowedConfiguration = {

		getSupportedMediaTypes() {
			return Object.values(SupportedSourceFormat);
		},

		targetFileExtension: ExtensionMediaTypeMapping.pdf.extension

	};

Object.freeze(allowedConfiguration);
Object.freeze(SupportedSourceFormat);

/**
 * An operation that allows specific pages in a PDF file to be replaced with pages from multiple PDF files.
 * <p>
 * For more complex use cases, refer the {@link CombineFilesOperation}
 *
 * Sample Usage:
 * <pre class="prettyprint">
 * <code>
 *  const credentials = PDFServicesSdk.Credentials.serviceAccountCredentialsBuilder()
 *            .fromFile("pdfservices-api-credentials.json")
 *            .build(),
 *        executionContext = PDFServicesSdk.ExecutionContext.create(credentials),
 *        ReplacePages = PDFServicesSdk.ReplacePages,
 *        replacePagesOperation = ReplacePages.Operation.createNew();
 *
 *  replacePagesOperation.setBaseInput(PDFServicesSdk.FileRef.createFromLocalFile('~/Documents/replacePagesOperationBaseInput.pdf',
 *  	ReplacePages.SupportedSourceFormat.pdf));
 *  replacePagesOperation.addPagesForReplace(1, PDFServicesSdk.FileRef.createFromLocalFile('~/Documents/replacePagesOperationFileToBeReplacedWithInput.pdf',
 *  	ReplacePages.SupportedSourceFormat.pdf));
 *
 *  replacePagesOperation.execute(executionContext)
 *      .then(result => result.saveAsFile('output/replacePagesOperationOutput.pdf'))
 *      .catch(err => console.log(err));
 * </code>
 * </pre>
 *
 */
class ReplacePagesOperation {
	/**
	 * @hideconstructor
	 */
	constructor() {
		this.filesToReplace = {};
		this.baseSourceFileRef = null;
		Object.preventExtensions(this);
	}

	/**
	 *
	 * Constructs a {@link ReplacePagesOperation} instance.
	 * @returns {ReplacePagesOperation} A new ReplacePagesOperation instance.
	 *
	 */
	static createNew() {
		return new ReplacePagesOperation();
	}

	static get SupportedSourceFormat() {
		return SupportedSourceFormat;
	}

	/**
	 * Sets a base input file.
	 * @param {!FileRef} baseSourceFileRef - The base input file.
	 */
	setBaseInput(baseSourceFileRef){
		this.baseSourceFileRef = baseSourceFileRef;
	}

	/**
	 * Adds the pages of the input PDF file for replacing the page of the base PDF file.
	 * <p>
	 * This method can be invoked multiple times with the same or different input PDF files.
	 * <p>
	 * If <code>pageRanges</code> is not provided, the specified page of the base PDF file will be replaced
	 * by all the pages of the input PDF file.
	 *
	 * @param {!Number} basePageToReplace - Page of base PDF file.
	 * @param {!FileRef} inputFile - A PDF file to be replaced with.
	 * @param {PageRanges=} pageRanges - Page ranges of the input PDF file; defaults to all the pages.
	 */
	addPagesForReplace(basePageToReplace, inputFile, pageRanges ){
		validateFileRef(inputFile);
		validateAllowedMediaType(allowedConfiguration.getSupportedMediaTypes(), inputFile);
		if(basePageToReplace < 1)
			throw new Error("Base file page should be greater than 0");
		if (!pageRanges) {
			pageRanges = new PageRanges();
			pageRanges.addAll();
		}
		validatePageRangesForOperation(pageRanges);
		let combineOperationInput = CombineOperationInput.createNew(inputFile, pageRanges);
		this.filesToReplace[basePageToReplace] = combineOperationInput;
	}

	/**
	 * Executes this operation using the supplied context and returns a Promise which resolves to the operation result.
	 *
	 * The resulting file may be stored in the system temporary directory (per the os.tempdir(), symlinks are resolved
	 * to the actual path).
	 * See {@link FileRef} for how temporary resources are cleaned up.
	 *
	 * @param {!ExecutionContext} context - The context in which the operation will be executed.
	 * @returns {Promise<FileRef>} A promise which resolves to the operation result.
	 * @throws {ServiceApiError} if an API call results in an error response.
	 * @throws {ServiceUsageError} if service usage limits have been reached or credentials quota has been exhausted.
	 */
	execute(context){
		try {
			this.validate(context);
		} catch (err) {
			return Promise.reject(err);
		}

		logger.info('All validations successfully done. Beginning Replace Pages Operation execution');
		const targetFileName = getRandomFileNameWithExtension(allowedConfiguration.targetFileExtension),
			operationMessage = new OperationMessage(this.filesToReplace, targetFileName, DefaultConfig.operationName.replacePages),
			replacePagesService = new ReplacePagesService();
		operationMessage.setBaseFileRef(this.baseSourceFileRef);
		return new Promise((resolve, reject) => {
			replacePagesService.perform(context, operationMessage)
				.then(res => resolve(res))
				.catch(err => reject(err));
		});
	}

	validate(context) {
		validateClientContext(context);
		validateFileRef(this.baseSourceFileRef);
		validateAllowedMediaType(allowedConfiguration.getSupportedMediaTypes(), this.baseSourceFileRef);
		if(Object.keys(this.filesToReplace).length === 0)
			throw new Error('No files to replace with');
	}

}

Object.freeze(ReplacePagesOperation);
module.exports = ReplacePagesOperation;
