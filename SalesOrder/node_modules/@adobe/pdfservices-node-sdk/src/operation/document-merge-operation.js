/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */
const DocumentMergeService = require('../internal/api/document-merge-service'),
	OperationMessage = require('../internal/cpf/operation-message'),
	ExtensionMediaTypeMapping = require('../internal/extension-mediatype-mapping'),
	{ getRandomFileNameWithExtension } = require('../internal/util/path-util'),
	logger = require('./../internal/logger'),
	DocumentMergeOptions = require('./option/documentmerge/document-merge-options'),
	DefaultConfig =  require('../internal/config/dc-services-default-config.js'),
	{
		validateClientContext, validateFileRef, validateAllowedMediaType,
		validateOperationOptions
	} = require('./../internal/util/validation-util'),
	_ = require('lodash-core');


/**
 *
 * Supported source file formats for {@link DocumentMergeOperation}.
 * @enum
 * @readonly
 * @memberOf DocumentMergeOperation
 *
 */
const SupportedSourceFormat = {

		/**
		 * Represents "application/vnd.openxmlformats-officedocument.wordprocessingml.document" media type
		 * @type {string}
		 */
		docx: ExtensionMediaTypeMapping.docx.mediaType
	},

	allowedConfiguration = {

		getSupportedMediaTypes() {
			return Object.values(SupportedSourceFormat);
		},
		optionInstanceMapping: new Map([
										   [ExtensionMediaTypeMapping.docx, DocumentMergeOptions]
									   ])
	};
Object.freeze(allowedConfiguration);
Object.freeze(SupportedSourceFormat);

/**
 * An operation that enables the clients to produce high fidelity PDF and Word documents with dynamic data inputs.
 * This operation merges the JSON data with the Word template to create dynamic documents for contracts and agreements,
 * invoices, proposals, reports, forms, branded marketing documents and more.
 *
 * To know more about document generation and document templates, please see the <a href="http://www.adobe.com/go/dcdocgen_overview_doc">documentation</a>
 *
 * Sample Usage:
 * <pre class="prettyprint">
 * <code>
 *  const credentials = PDFServicesSdk.Credentials.serviceAccountCredentialsBuilder()
 *            .fromFile("pdfservices-api-credentials.json")
 *            .build(),
 *        executionContext = PDFServicesSdk.ExecutionContext.create(credentials),
 *        DocumentMerge = PDFServicesSdk.DocumentMerge,
 *        documentMergeOptions = DocumentMerge.options,
 *        jsonDataForMerge = JSON.parse("{\"customerName\": \"James\", \"customerVisits\": 100}");
 *        options = new documentMergeOptions.DocumentMergeOptions(jsonDataForMerge, documentMergeOptions.OutputFormat.PDF),
 *        documentMergeOperation = DocumentMerge.Operation.createNew(options),
 *        input = PDFServicesSdk.FileRef.createFromLocalFile('~/Documents/DocumentMergeOperationInput.docx', DocumentMerge.SupportedSourceFormat.docx);
 *
 *  documentMergeOperation.setInput(input);
 *
 *  documentMergeOperation.execute(executionContext)
 *      .then(result => result.saveAsFile('output/DocumentMergeOperationOutput.pdf'))
 *      .catch(err => console.log(err));
 * </code>
 * </pre>
 */
class DocumentMergeOperation {
	/**
	 * @hideconstructor
	 */
	constructor(options) {
		this.documentTemplate = null;
		this.options = options;
		Object.preventExtensions(this);
	}

	/**
	 * Constructs a {@link DocumentMergeOperation} instance.
	 * @param {!DocumentMergeOptions} options - Options for merging a document template with provided input JSON data; Cannot be null.
	 * @returns {DocumentMergeOperation} A new DocumentMergeOperation instance.
	 *
	 */
	static createNew(options) {
		if(options == null) throw new Error('options can not be null');
		return new DocumentMergeOperation(options);
	}

	static get SupportedSourceFormat() {
		return SupportedSourceFormat;
	}

	/**
	 * Sets the input DOCX based document template.
	 * @param {!FileRef} documentTemplate - An input file; Cannot be null.
	 */
	setInput(documentTemplate) {
		this.documentTemplate = documentTemplate;
	}

	/**
	 * Executes this operation using the supplied context and returns a Promise which resolves to the operation result.
	 *
	 * The resulting file may be stored in the system temporary directory (per the os.tempdir(), symlinks are resolved
	 * to the actual path).
	 * See {@link FileRef} for how temporary resources are cleaned up.
	 *
	 * @param {!ExecutionContext} context - The context in which the operation will be executed.
	 * @returns {Promise<FileRef>} A promise which resolves to the operation result.
	 * @throws {ServiceApiError} if an API call results in an error response.
	 * @throws {ServiceUsageError} if service usage limits have been reached or credentials quota has been exhausted.
	 */
	execute(context) {
		try {
			this.validate(context);
		} catch (err) {
			return Promise.reject(err);
		}

		logger.info('All validations successfully done. Beginning Document Merge Operation execution');
		const targetFileName = getRandomFileNameWithExtension(this.options.outputFormat),
			operationMessage = new OperationMessage(this.documentTemplate, targetFileName, DefaultConfig.operationName.mergeDocument),
			documentMergeService = new DocumentMergeService();
		operationMessage.setOptions(this.options);
		return documentMergeService.perform(context, operationMessage)
			.then(res => Promise.resolve(res))
			.catch(err => Promise.reject(err));
	}

	validate(context) {
		validateClientContext(context);
		if(!(this.options instanceof DocumentMergeOptions)) {
			throw new Error('Invalid option instance type provided for the source template');
		}
		const copy = _.cloneDeep(this.options);
		validateOperationOptions(copy);
		validateFileRef(this.documentTemplate);
		validateAllowedMediaType(allowedConfiguration.getSupportedMediaTypes(), this.documentTemplate);
		if(!Object.keys(this.options.jsonDataForMerge).length){
			throw new Error('Input JSON Data cannot be null or empty');
		}
	}

}

Object.freeze(DocumentMergeOperation);
module.exports = DocumentMergeOperation;

