/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const ProtectPDFService = require('../internal/api/protect-pdf-service'),
	OperationMessage = require('../internal/cpf/operation-message'),
	ExtensionMediaTypeMapping = require('../internal/extension-mediatype-mapping'),
	{ getRandomFileNameWithExtension } = require('../internal/util/path-util'),
	logger = require('./../internal/logger'),
	PasswordProtectOptions = require('./option/protectpdf/password-protect-options'),
	DefaultConfig =  require('../internal/config/dc-services-default-config.js'),
	{
		validateClientContext, validateFileRef, validateAllowedMediaType,
		validateOptionInstanceType, validateProtectPDFOptions, validateOperationOptions
	} = require('./../internal/util/validation-util');


/**
 *
 * Supported source file formats for {@link ProtectPDFOperation}.
 * @enum
 * @readonly
 * @memberOf ProtectPDFOperation
 *
 */
const SupportedSourceFormat = {

		/**
		 * Represents "application/pdf" media type
		 * @type {string}
		 */
		pdf: ExtensionMediaTypeMapping.pdf.mediaType
	},

	allowedConfiguration = {

		targetFileExtension: ExtensionMediaTypeMapping.pdf.extension,

		getSupportedMediaTypes() {
			return Object.values(SupportedSourceFormat);
		},
		optionInstanceMapping: new Map([
			[ExtensionMediaTypeMapping.pdf, PasswordProtectOptions]
		])
	};
Object.freeze(allowedConfiguration);
Object.freeze(SupportedSourceFormat);

/**
 * An operation that is used for securing PDF document with password(s).
 * The password(s) is used for encrypting the PDF document and setting the restriction on certain features
 * like printing, editing and copying in the PDF document.
 *
 * The supported algorithm for encrypting the PDF contents are listed here. The {@link PasswordProtectOptions.EncryptionAlgorithm} object can be used to set the
 * encryption algorithm.
 * <ul>
 * <li>AES-128</li>
 * <li>AES-256</li>
 * </ul>
 * For AES-128 encryption the password supports LATIN-I characters only.
 * For AES-256 encryption the password supports Unicode character set.
 *
 * Sample Usage:
 * <pre class="prettyprint">
 * <code>
 *  const credentials = PDFServicesSdk.Credentials.serviceAccountCredentialsBuilder()
 *            .fromFile("pdfservices-api-credentials.json")
 *            .build(),
 *        executionContext = PDFServicesSdk.ExecutionContext.create(credentials),
 *        ProtectPDF = PDFServicesSdk.ProtectPDF,
 *        protectPDFOptions = ProtectPDF.options,
 *        permissions = protectPDFOptions.Permissions.createNew();
 *
 *  permissions.addPermission(protectPDFOptions.Permission.PRINT_LOW_QUALITY);
 *  permissions.addPermission(protectPDFOptions.Permission.EDIT_DOCUMENT_ASSEMBLY);
 *  permissions.addPermission(protectPDFOptions.Permission.COPY_CONTENT);
 *
 *  const options = new protectPDFOptions.PasswordProtectOptions.Builder()
 *  		.setUserPassword("openpassword")
 *  		.setOwnerPassword("permissionspassword")
 *  		.setPermissions(permissions)
 *  		.setEncryptionAlgorithm(protectPDFOptions.EncryptionAlgorithm.AES_256)
 *  		.setContentEncryption(protectPDFOptions.ContentEncryption.ALL_CONTENT_EXCEPT_METADATA)
 *  		.build(),
 *        protectPDFOperation = ProtectPDF.Operation.createNew(options),
 *        input = PDFServicesSdk.FileRef.createFromLocalFile('~/Documents/protectPDFInput.pdf', ProtectPDF.SupportedSourceFormat.pdf);
 *
 *  protectPDFOperation.setInput(input);
 *
 *  protectPDFOperation.execute(executionContext)
 *      .then(result => result.saveAsFile('output/protectPDFOutput.pdf'))
 *      .catch(err => console.log(err));
 * </code>
 * </pre>
 *
 */
class ProtectPDFOperation {
	/**
	 * @hideconstructor
	 */
	constructor(options) {
		this.sourceFileRef = null;
		this.options = options;
		Object.preventExtensions(this);
	}

	/**
	 * Constructs a {@link ProtectPDFOperation} instance.
	 * @param {!PasswordProtectOptions} options - Options for securing PDF file with password(s).
	 * @returns {ProtectPDFOperation} A new ProtectPDFOperation instance.
	 *
	 */
	static createNew(options) {
		if(options == null) throw new Error('options can not be null');
		return new ProtectPDFOperation(options);
	}

	static get SupportedSourceFormat() {
		return SupportedSourceFormat;
	}

	/**
	 * Sets an input file.
	 * @param {!FileRef} sourceFileRef - An input file.
	 */
	setInput(sourceFileRef) {
		this.sourceFileRef = sourceFileRef;
	}

	/**
	 * Executes this operation using the supplied context and returns a Promise which resolves to the operation result.
	 *
	 * The resulting file may be stored in the system temporary directory (per the os.tempdir(), symlinks are resolved
	 * to the actual path).
	 * See {@link FileRef} for how temporary resources are cleaned up.
	 *
	 * @param {!ExecutionContext} context - The context in which the operation will be executed.
	 * @returns {Promise<FileRef>} A promise which resolves to the operation result.
	 * @throws {ServiceApiError} if an API call results in an error response.
	 * @throws {ServiceUsageError} if service usage limits have been reached or credentials quota has been exhausted.
	 */
	execute(context) {
		try {
			this.validate(context);
		} catch (err) {
			return Promise.reject(err);
		}

		logger.info('All validations successfully done. Beginning Protect PDF operation execution');
		const targetFileName = getRandomFileNameWithExtension(allowedConfiguration.targetFileExtension),
			operationMessage = new OperationMessage(this.sourceFileRef, targetFileName, DefaultConfig.operationName.protectPdf),
			protectPDFService = new ProtectPDFService();
		operationMessage.setOptions(this.options);
		return protectPDFService.perform(context, operationMessage)
			.then(res => Promise.resolve(res))
			.catch(err => Promise.reject(err));
	}

	validate(context) {
		validateClientContext(context);
		validateFileRef(this.sourceFileRef);
		validateAllowedMediaType(allowedConfiguration.getSupportedMediaTypes(), this.sourceFileRef);
		validateOptionInstanceType(allowedConfiguration.optionInstanceMapping, this.sourceFileRef, this.options);
		validateOperationOptions(this.options);
		validateProtectPDFOptions(this.options);
	}

}

Object.freeze(ProtectPDFOperation);
module.exports = ProtectPDFOperation;


