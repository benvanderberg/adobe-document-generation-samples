/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const RotatePagesService = require('../internal/api/rotate-pages-service'),
	OperationMessage = require('../internal/cpf/operation-message'),
	ExtensionMediaTypeMapping = require('../internal/extension-mediatype-mapping'),
	{ getRandomFileNameWithExtension } = require('../internal/util/path-util'),
	logger = require('./../internal/logger'),
	PageActions = require('../internal/cpf/request/platform/page-actions'),
	PageRanges = require('./option/page-ranges'),
	DefaultConfig =  require('../internal/config/dc-services-default-config.js'),
	{
		validateClientContext, validateFileRef, validateAllowedMediaType, validatePageRangesForOperation
	} = require('./../internal/util/validation-util');


/**
 *
 * Supported source file formats for {@link RotatePagesOperation}.
 * @enum
 * @readonly
 * @memberOf RotatePagesOperation
 *
 */
const SupportedSourceFormat = {

		/**
		 * Represents "application/pdf" media type
		 * @type {string}
		 */
		pdf: ExtensionMediaTypeMapping.pdf.mediaType
	},

	/**
	 *
	 * Supported rotation angle values for {@link RotatePagesOperation}.
	 * @enum
	 * @readonly
	 * @memberOf RotatePagesOperation
	 *
	 */
	Angle = {

		/**
		 * Represents 90 degrees clockwise rotation
		 * @type {number}
		 */
		_90: 90,

		/**
		 * Represents 180 degrees clockwise rotation
		 * @type {number}
		 */
		_180: 180,

		/**
		 * Represents 270 degrees clockwise rotation
		 * @type {number}
		 */
		_270: 270,

	},

	allowedConfiguration = {

		targetFileExtension: ExtensionMediaTypeMapping.pdf.extension,

		getSupportedMediaTypes() {
			return Object.values(SupportedSourceFormat);
		},

		Angle(){
			return Object.values(Angle)
		}

	};
Object.freeze(allowedConfiguration);
Object.freeze(SupportedSourceFormat);
Object.freeze(Angle);

/**
 * An operation that allows rotation of specific pages in a PDF file.
 *
 * Sample Usage:
 * <pre class="prettyprint">
 * <code>
 *  const credentials = PDFServicesSdk.Credentials.serviceAccountCredentialsBuilder()
 *            .fromFile("pdfservices-api-credentials.json")
 *            .build(),
 *        executionContext = PDFServicesSdk.ExecutionContext.create(credentials),
 *        RotatePages = PDFServicesSdk.RotatePages,
 *        rotatePagesOperation = RotatePages.Operation.createNew();
 *
 *  rotatePagesOperation.setInput(PDFServicesSdk.FileRef.createFromLocalFile('~/Documents/rotatePagesOperationInput.pdf',
 *  	RotatePages.SupportedSourceFormat.pdf));
 *  rotatePagesOperation.setAngleToRotatePagesBy(PDFServicesSdk.RotatePages.Angle._90);
 *
 *  rotatePagesOperation.execute(executionContext)
 *      .then(result => result.saveAsFile('output/rotatePagesOperationOutput.pdf'))
 *      .catch(err => console.log(err));
 * </code>
 * </pre>
 *
 */
class RotatePagesOperation {

	/**
	 * @hideconstructor
	 */
	constructor() {
		this.sourceFileRef = null;
		this.pageActions = new PageActions();
		Object.preventExtensions(this);
	}

	/**
	 * Constructs a {@link RotatePagesOperation} instance.
	 * @returns {RotatePagesOperation} A new RotatePagesOperation instance.
	 *
	 */
	static createNew() {
		return new RotatePagesOperation();
	}

	static get SupportedSourceFormat() {
		return SupportedSourceFormat;
	}

	static get Angle(){
		return Angle;
	}

	/**
	 * Sets an input file.
	 * @param {!FileRef} sourceFileRef - An input file.
	 */
	setInput(sourceFileRef) {
		this.sourceFileRef = sourceFileRef;
	}

	/**
	 * Sets angle (in clockwise direction) for rotating pages of the input PDF file; can be invoked
	 * multiple times to set rotation angle for different set of pages.
	 *
	 * <p>
	 * Multiple invocation of this method on the same set of pages can result in rotating pages multiple times.
	 * <pre>
	 * For e.g.:
	 * PageRanges pageRanges = new PDFServicesSdk.PageRanges();
	 * pageRanges.addSinglePage(1);
	 * rotatePagesOperation.setAngleToRotatePagesBy(PDFServicesSdk.RotatePages.Angle._90, pageRanges);
	 * rotatePagesOperation.setAngleToRotatePagesBy(PDFServicesSdk.RotatePages.Angle._180, pageRanges);
	 * </pre>
	 * Above invocations will effectively rotate pages (as specified by the page ranges) by 270 degrees.
	 *
	 * If <code>pageRanges</code> is not provided, all pages of the input PDF are rotated by the specified angle.
	 *
	 * @param {!RotatePagesOperation.Angle} angle - Angle for rotation; see {@link RotatePagesOperation.Angle} for valid angle values.
	 * @param {PageRanges=} pageRanges - Page ranges of the PDF file for rotation.
	 */
	setAngleToRotatePagesBy(angle, pageRanges){
		if(!pageRanges){
			pageRanges = new PageRanges();
			pageRanges.addAll();
		}
		validatePageRangesForOperation(pageRanges);
		this.validateAngleValue(angle);
		this.pageActions.withRotateAction(pageRanges.getRanges(),angle);
	}


	/**
	 * Executes this operation using the supplied context and returns a Promise which resolves to the operation result.
	 *
	 * The resulting file may be stored in the system temporary directory (per the os.tempdir(), symlinks are resolved
	 * to the actual path).
	 * See {@link FileRef} for how temporary resources are cleaned up.
	 *
	 * @param {!ExecutionContext} context - The context in which the operation will be executed.
	 * @returns {Promise<FileRef>} A promise which resolves to the operation result.
	 * @throws {ServiceApiError} if an API call results in an error response.
	 * @throws {ServiceUsageError} if service usage limits have been reached or credentials quota has been exhausted.
	 */

	execute(context) {
		try {
			this.validate(context);
		} catch (err) {
			return Promise.reject(err);
		}
		logger.info('All validations successfully done. Beginning Rotate Pages operation execution');
		const targetFileName = getRandomFileNameWithExtension(allowedConfiguration.targetFileExtension),
			operationMessage = new OperationMessage(this.sourceFileRef, targetFileName, DefaultConfig.operationName.rotatePages),
			rotatePagesService = new RotatePagesService();
		operationMessage.setOptions(this.pageActions);
		return rotatePagesService.perform(context, operationMessage)
			.then(res => Promise.resolve(res))
			.catch(err => Promise.reject(err));
	}

	validate(context) {
		validateClientContext(context);
		validateFileRef(this.sourceFileRef);
		validateAllowedMediaType(allowedConfiguration.getSupportedMediaTypes(), this.sourceFileRef);
		if(!this.pageActions.pageActions || this.pageActions.pageActions.length === 0)
			throw new Error('No rotation specified for the operation');
		if(this.pageActions.pageActions.length > 200)
			throw new Error('Too many rotations not allowed.');
	}
	validateAngleValue(angle){
		if(!angle) throw new Error('Rotate angle can not be null');
		if(!Object.values(Angle).includes(angle)) throw new Error('Invalid angle value');
	}

}

Object.freeze(RotatePagesOperation);
module.exports = RotatePagesOperation;


